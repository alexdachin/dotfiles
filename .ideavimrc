set scrolloff=3     " number of lines for context
set incsearch       " show search results as i type
let mapleader = ',' " set leader to comma
set ideajoin        " smart join
set surround        " emulate vim-surround
set NERDTree        " emulate NERDTree
set hls             " highlight search
set matchit         " emulate matchit

" Clipboard
vmap <space>y "+y
nmap <space>yy "+yy
nmap <space>p "+p
nmap <space>P "+P

" Language-centric key maps
map <space>li <Action>(ShowIntentionActions)
map <space>lr <Action>(RenameElement)
map <space>lt <Action>(GotoTypeDeclaration)
map <space>lu <Action>(FindUsages)

" Run key maps
map <space>rr <Action>(Run)
map <space>rb <Action>(ToggleLineBreakpoint)
map <space>rd <Action>(Debug)
map <space>rs <Action>(Stop)

" String manipulation key maps
" emulate coercion in tpope/vim-abolish
nmap crc <Action>(StringManipulation.ToCamelCase)
nmap crk <Action>(StringManipulation.ToKebabCase)
nmap crs <Action>(StringManipulation.ToSnakeCase)

" Generic vim editor key maps
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)
nmap zc <Action>(CollapseRegion)
nmap zo <Action>(ExpandRegion)
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)

" Terminal key maps
map <leader>tt <Action>(ActivateTerminalToolWindow)
map <leader>tf <Action>(Terminal.OpenInTerminal)

" Buffers key maps
nmap <leader>bl :buffers<cr>
nmap <leader>b# :b #<cr>

" Files key maps
nmap <leader>ft :NERDTree<CR>
nmap <leader>ff :NERDTreeFind<CR>
nmap <leader>fc :NERDTreeClose<CR>
nmap <leader>fs <Action>(GotoFile)

" Other
nmap <leader>rg <Action>(FindInPath)
nmap \r <Action>(ReformatCode)
nmap \i <Action>(OptimizeImports)
